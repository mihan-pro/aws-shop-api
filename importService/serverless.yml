service: importservice
frameworkVersion: "3"

plugins:
  - serverless-esbuild

resources:
  Resources:
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: "mikhail_proshin@epam.com"
        TopicArn: !Ref createProductTopic
        FilterPolicy:
          count:
          - ">0"

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: 'arn:aws:s3:::mp-ep-aws-course-uploaded'
        - Effect: "Allow"
          Action:
            - "sqs:*"
          Resource: 'arn:aws:sqs:eu-west-1:374052466963:catalogItemsQueue'
        - Effect: "Allow"
          Action:
              - "sns:*"
          Resource: !Ref createProductTopic

# you can define service wide environment variables here
  environment:
    SQS_URL: "https://sqs.eu-west-1.amazonaws.com/374052466963/catalogItemsQueue"
    SNS_ARN: !Ref createProductTopic

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  importProductsFile:
    handler: importProductsFile.importProductsFile
    events:
      - http:
          method: 'GET'
          path: '/import'
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: importFileParser.importFileParser
    events:
      - s3:
          existing: true
          bucket: mp-ep-aws-course-uploaded
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
